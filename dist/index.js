const e=(...e)=>{return((...e)=>async r=>{return await e.reduce(async(e,t)=>{let s=r||{};return e instanceof Promise?s=await e:"function"==typeof e&&(s=await e()),t(s)},r)})(...e.map(e=>r(e)))},r=e=>(function(r){return new Promise((t,s)=>{e(r,e=>{t(e)},s)})}),t=r=>({...r,_handlers:[],add:function(...e){if(!e||e&&!e.filter(e=>void 0!==e).length)return;return this._handlers=[...this._handlers,...e],function(){this._handlers=this._handlers.filter(e=>e!=e)}.bind(this)},clear:function(){this._handlers=[]},get:function(){return this._handlers},hasInterceptors:function(){return!!this.get().length},create:function(){return this._handlers.length?e(...this._handlers):e((e,r)=>{r(e)})}}),s=()=>({response:t({}),request:t({}),error:t({})}),n=(()=>{const e=s();return{interceptors:{ejectAll:function(){e.request.clear(),e.response.clear(),e.error.clear()},request:{use:r=>e.request.add(r)},response:{use:r=>e.response.add(r)},error:{use:r=>e.error.add(r)}},get:()=>e}})(),a=({request:e,response:r,error:t}={})=>{const n=s();return n.request.add(e),n.response.add(r),n.error.add(t),n},o=e=>{const r={...n.get().request};e.request.hasInterceptors()&&r.add(...e.request.get());const t={...n.get().response};e.response.hasInterceptors()&&t.add(...e.response.get());const s={...n.get().error};return e.error.hasInterceptors()&&s.add(...e.error.get()),{request:r,response:t,error:s}},u=(e=>r=>{const t=(e=>async(r,t,s={})=>{const n=e.request.create(),a=e.response.create(),o=e.error.create(),u=await n(s);return await r.apply(void 0,[t,u]).then(e=>e&&(e.ok||200===e.status)?a(e):Promise.reject({status:e.status,statusText:e.statusText})).catch(async({status:e,statusText:r}={})=>{const s=await o({url:t,status:e,statusText:r,request:u});return Promise.reject(s)})})(r||n.get());if(e.Proxy)return new Proxy(e.fetch,{apply:async(e,r,s)=>t(e,...s)})})(window);export{o as combineInterceptors,u as createFetch,a as createInstanceInterceptors,n as fetchInterceptor};
